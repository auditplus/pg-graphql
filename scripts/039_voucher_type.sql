create table if not exists voucher_type
(
    id            int       not null generated by default as identity (start with 101 increment by 1) primary key,
    name          text      not null,
    prefix        text,
    sequence_id   int references voucher_type,
    is_default    boolean   not null default false,
    auto_sequence boolean   not null default true,
    base_type     text      not null,
    config        json      not null,
    approve1_id   int,
    approve2_id   int,
    approve3_id   int,
    approve4_id   int,
    approve5_id   int,
    members       jsonb,
    created_at    timestamp not null default current_timestamp,
    updated_at    timestamp not null default current_timestamp,
    constraint name_min_length check (char_length(trim(name)) > 0),
    constraint prefix_invalid check (prefix ~ '^[A-Z]+$' and char_length(prefix) between 2 and 3),
    constraint base_type_invalid check (check_base_voucher_type(base_type))
);
--##
create trigger sync_voucher_type_updated_at
    before update
    on voucher_type
    for each row
execute procedure sync_updated_at();
--##
create view member_profile as
select id,
       name,
       remote_access,
       is_root,
       (select ui_perms from member_role b where name = member.role_id)                                    as ui_perms,
       (select json_agg(json_build_object('id', branch.id, 'name', branch.name, 'mobile', branch.mobile,
                                          'alternate_mobile', branch.alternate_mobile, 'email', branch.email,
                                          'telephone', branch.telephone, 'contact_person', branch.contact_person))
        from branch
        where (case when member.is_root then true else member.id = any (members) end))                     as branches,
       (select json_agg(json_build_object('id', voucher_type.id, 'name', voucher_type.name, 'base_type',
                                          voucher_type.base_type))
        from voucher_type
        where (case
                   when member.is_root then true
                   else coalesce(jsonb_array_length(members),0)=0 or members @>
                                           jsonb_build_array(json_build_object('member_id', member.id)) end)) as voucher_types,
       settings
from member
where id = (current_setting('my.claims')::json ->> 'id')::int
  and (current_setting('my.claims')::json ->> 'claim_type')::text = 'Member';
